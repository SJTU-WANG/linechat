//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "AVAudioPlayerDelegate.h"
#import "AVAudioRecorderDelegate.h"
#import "TGAudioRecorderDelegate.h"
#import "TGModernConversationAudioPlayerDelegate.h"

@class AVAudioPlayer, AVAudioRecorder, GCDMulticastDelegate<YNAudioManagerDelegate>, NSString, NSTimer, TGAudioRecorder, TGModernConversationAudioPlayer;

@interface YNAudioManager : NSObject <AVAudioRecorderDelegate, AVAudioPlayerDelegate, TGModernConversationAudioPlayerDelegate, TGAudioRecorderDelegate>
{
    NSTimer *_refreshTimer;
    NSTimer *_timer;
    NSTimer *_volumeLevelTimer;
    _Bool playbackWasInterrupted;
    _Bool playbackWasPaused;
    double volumeLevelResults;
    _Bool _isListenMode;
    _Bool _playingThroughDeviceSpeaker;
    _Bool _isPlayingAudio;
    _Bool _isContinuePlay;
    _Bool _currentAudioSessionActived;
    _Bool _hasAddSensorNotification;
    float _currentSystemVolume;
    long long _audioTime;
    AVAudioRecorder *_recorder;
    AVAudioPlayer *_audioPlayer;
    TGAudioRecorder *_opusRecorder;
    TGModernConversationAudioPlayer *_opusPlayer;
    GCDMulticastDelegate<YNAudioManagerDelegate> *_multicastDelegate;
    unsigned long long _lastPlayType;
}

+ (id)sharedManager;
- (void).cxx_destruct;
- (void)activeAudoeSession;
- (void)activePlayAudoeSession;
- (void)addDelegate:(id)arg1;
- (void)addSensorAndAudioChangeNotifacation;
@property(retain, nonatomic) AVAudioPlayer *audioPlayer; // @synthesize audioPlayer=_audioPlayer;
- (void)audioPlayer:(id)arg1 playingPosition:(float)arg2;
- (void)audioPlayerDecodeErrorDidOccur:(id)arg1 error:(id)arg2;
- (void)audioPlayerDidFinish:(id)arg1;
- (void)audioPlayerDidFinishPlaying:(id)arg1 successfully:(_Bool)arg2;
- (void)audioRecorderDidStartRecording:(id)arg1;
- (void)audioRouteChangeNotification:(id)arg1;
@property(nonatomic) long long audioTime; // @synthesize audioTime=_audioTime;
- (void)changeAudioOutputToListner;
- (void)changeAudioOutputToSpeaker;
- (void)continuePlay;
@property(nonatomic) _Bool currentAudioSessionActived; // @synthesize currentAudioSessionActived=_currentAudioSessionActived;
@property(nonatomic) float currentSystemVolume; // @synthesize currentSystemVolume=_currentSystemVolume;
- (void)dealloc;
@property(nonatomic) _Bool hasAddSensorNotification; // @synthesize hasAddSensorNotification=_hasAddSensorNotification;
- (id)init;
- (void)interruptionNotification:(id)arg1;
- (_Bool)isBluetoothHFPPluggedIn;
@property(nonatomic) _Bool isContinuePlay; // @synthesize isContinuePlay=_isContinuePlay;
@property(nonatomic) _Bool isPlayingAudio; // @synthesize isPlayingAudio=_isPlayingAudio;
- (_Bool)judgeCurrentPreferOutputChannal;
@property(nonatomic) unsigned long long lastPlayType; // @synthesize lastPlayType=_lastPlayType;
- (void)levelTimerCallback:(id)arg1;
@property(retain, nonatomic) GCDMulticastDelegate<YNAudioManagerDelegate> *multicastDelegate; // @synthesize multicastDelegate=_multicastDelegate;
@property(retain, nonatomic) TGModernConversationAudioPlayer *opusPlayer; // @synthesize opusPlayer=_opusPlayer;
@property(retain, nonatomic) TGAudioRecorder *opusRecorder; // @synthesize opusRecorder=_opusRecorder;
- (void)pausePlay;
- (void)playAudioWithFilePath:(id)arg1 continues:(_Bool)arg2 fromPosition:(float)arg3;
- (void)prepareRecord;
- (void)prepareToStopRecord;
- (id)recordFilePath;
- (void)recordTimeCallBack:(id)arg1;
@property(retain, nonatomic) AVAudioRecorder *recorder; // @synthesize recorder=_recorder;
- (void)registerNotification;
- (void)removeDelegate:(id)arg1;
- (void)removeSensorAndAudioChangeNotification;
- (void)resetAudioStatus;
- (void)sensorStateChange:(id)arg1;
- (void)startRecord;
- (void)stopPlaying;
- (void)stopPlayingToPlay;
- (void)stopRecord;
- (void)stopRecordWithBlock:(CDUnknownBlockType)arg1;
- (id)stringFromRouteDescription:(id)arg1;
- (void)unActiveSession;
- (void)unRegisterNotification;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

